{"version":3,"file":"vminpoly.js","names":[],"mappings":"","sources":["vminpoly.coffee"],"sourcesContent":["XMLHttpFactories = [\n  -> new XMLHttpRequest(),\n  -> new ActiveXObject(\"Msxml2.XMLHTTP\"),\n  -> new ActiveXObject(\"Msxml3.XMLHTTP\"),\n  -> new ActiveXObject(\"Microsoft.XMLHTTP\")]\n\ncreateXMLHTTPObject = ->\n  xmlhttp = false\n  i = 0\n\n  while i < XMLHttpFactories.length\n    try\n      xmlhttp = XMLHttpFactories[i++]()\n    catch e\n      continue\n    break\n  xmlhttp\n\n##toCamelCase = (s) ->\n##  s.replace(/-([a-z])/g, (g) ->\n##    return g[1].toUpperCase()\n\najax = (url, onload) ->\n  xmlhttp = createXMLHTTPObject()\n  xmlhttp.onreadystatechange = ->\n    unless xmlhttp.readyState is 4\n      return\n    unless xmlhttp.status is 200 || url.match(/^file:\\/\\/\\//)\n      throw \"Error!\"\n    console.log \"INFO: processing #{url}\"\n    onload xmlhttp.responseText\n    return\n  try\n    xmlhttp.open \"GET\", url, true\n    xmlhttp.send()\n  catch e\n    console.log \"ERROR: #{e.message} (#{e.type}) when accessing #{url}\"\n  return\n\n# get window dimensions, cross-browser compatible\n# Thanks to: Stefano Gargiulo\ngetViewportSize = ->\n  x = 0\n  y = 0\n  if window.innerHeight # all except Explorer < 9\n    x = window.innerWidth\n    y = window.innerHeight\n  else if document.documentElement and document.documentElement.clientHeight\n    # Explorer 6 Strict Mode\n    x = document.documentElement.clientWidth\n    y = document.documentElement.clientHeight\n  else if document.body # other Explorers < 9\n    x = document.body.clientWidth\n    y = document.body.clientHeight\n  width: x\n  height: y\n\ninitLayoutEngine = () ->\n  analyzeStyleRule = (rule) ->\n    declarations = []\n    for declaration in rule.value\n      hasDimension = false\n      for token in declaration.value\n        if token.tokenType is 'DIMENSION' and (token.unit is 'vmin' or token.unit is 'vh' or token.unit is 'vw')\n          hasDimension = true\n      if hasDimension\n        declarations.push declaration\n    rule.value = declarations\n    declarations\n  analyzeStylesheet = (sheet) ->\n    rules = []\n    for rule in sheet.value\n      switch rule.type\n        when 'STYLE-RULE'\n          decs = analyzeStyleRule rule\n          unless decs.length is 0\n            rules.push rule\n        when 'AT-RULE'\n          atRules = analyzeStylesheet rule\n          unless atRules.length is 0\n            rules.push rule\n    sheet.value = rules\n    rules\n\n  onresize = ->\n    vpDims = getViewportSize()\n\n    dims =\n      vh: vpDims.height / 100\n      vw: vpDims.width / 100\n    dims.vmin = Math.min dims.vh, dims.vw\n\n    vpAspectRatio = vpDims.width / vpDims.height\n\n    map = (a, f) ->\n      if a.map?\n        a.map f\n      else\n        a1 = []\n        for e in a\n          a1.push f e\n        a1\n\n    generateRuleCode = (rule) ->\n      declarations = []\n\n      ruleCss = (map rule.selector, (o) -> if o.toSourceString? then o.toSourceString() else '').join ''\n      ruleCss += \"{\"\n      for declaration in rule.value\n        ruleCss += declaration.name\n        ruleCss += \":\"\n        for token in declaration.value\n          if token.tokenType is 'DIMENSION' and (token.unit is 'vmin' or token.unit is 'vh' or token.unit is 'vw')\n            ruleCss += \"#{Math.floor(token.num*dims[token.unit])}px\"\n          else\n            ruleCss += token.toSourceString()\n        ruleCss += \";\"\n      ruleCss += \"}\\r\"\n      ruleCss\n    generateSheetCode = (sheet) ->\n      sheetCss = ''\n      for rule in sheet.value\n        switch rule.type\n          when 'STYLE-RULE'\n            sheetCss += generateRuleCode rule\n          when 'AT-RULE'\n            if rule.name is 'media'\n              prelude = ''\n              mar = false\n              nums = []\n              for t in rule.prelude\n                if t.name is '('\n                  prelude += '('\n                  for t1 in t.value\n                    source = if t1.toSourceString? then t1.toSourceString() else ''\n                    if t1.tokenType is 'IDENT' and source is 'max-aspect-ratio'\n                      mar = true\n                    if t1.tokenType is 'NUMBER'\n                      nums.push parseInt source\n\n                    prelude += source\n                  #prelude += (map t.value, (o) -> if o.toSourceString? then o.toSourceString() else '').join ''\n                  #prelude += t.value.join ''\n                  prelude += ')'\n                else\n                  prelude += t.toSourceString()\n              if vpAspectRatio < nums[0] / nums[1]\n                sheetCss += generateSheetCode rule\n            else\n              prelude = ''\n              for t in rule.prelude\n                if t.name is '('\n                  prelude += '('\n                  prelude += (map t.value, (o) -> if o.toSourceString? then o.toSourceString() else '').join ''\n                  #prelude += t.value.join ''\n                  prelude += ')'\n                else\n                  prelude += t.toSourceString()\n              sheetCss += \"@#{rule.name} #{prelude} {\"\n              sheetCss += generateSheetCode rule\n              sheetCss += '}\\n'\n      sheetCss\n    css = ''\n    for url, sheet of sheets\n      css += generateSheetCode sheet\n    if styleElement.styleSheet?\n      styleElement.styleSheet.cssText = css\n    else\n      styleElement.innerHTML = css\n\n  sheets = {}\n  styleElement = document.createElement 'style'\n  head = document.getElementsByTagName('head')[0]\n  head.appendChild styleElement\n\n  links = document.getElementsByTagName 'link'\n  innerSheetCount = 0;\n  outerSheetCount = 0;\n  for i in links\n    unless i.rel is 'stylesheet'\n      continue\n    innerSheetCount++;\n    ajax i.href, (cssText) ->\n      tokenlist = tokenize cssText\n      sheet = parse tokenlist\n      analyzeStylesheet sheet\n      sheets[i.href] = sheet\n      outerSheetCount++\n      if outerSheetCount is innerSheetCount\n        window.onresize()\n      return\n\n  window.onresize = onresize\n  return\n\ninitLayoutEngine()\n"],"sourceRoot":"/source/"}